// Code generated by go-swagger; DO NOT EDIT.

package qubic_live_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new qubic live service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for qubic live service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	QubicLiveServiceBroadcastTransaction(params *QubicLiveServiceBroadcastTransactionParams, opts ...ClientOption) (*QubicLiveServiceBroadcastTransactionOK, error)

	QubicLiveServiceGetBalance(params *QubicLiveServiceGetBalanceParams, opts ...ClientOption) (*QubicLiveServiceGetBalanceOK, error)

	QubicLiveServiceGetBlockHeight(params *QubicLiveServiceGetBlockHeightParams, opts ...ClientOption) (*QubicLiveServiceGetBlockHeightOK, error)

	QubicLiveServiceGetTickInfo(params *QubicLiveServiceGetTickInfoParams, opts ...ClientOption) (*QubicLiveServiceGetTickInfoOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
QubicLiveServiceBroadcastTransaction qubic live service broadcast transaction API
*/
func (a *Client) QubicLiveServiceBroadcastTransaction(params *QubicLiveServiceBroadcastTransactionParams, opts ...ClientOption) (*QubicLiveServiceBroadcastTransactionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQubicLiveServiceBroadcastTransactionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QubicLiveService_BroadcastTransaction",
		Method:             "POST",
		PathPattern:        "/broadcast-transaction",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QubicLiveServiceBroadcastTransactionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QubicLiveServiceBroadcastTransactionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*QubicLiveServiceBroadcastTransactionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
QubicLiveServiceGetBalance qubic live service get balance API
*/
func (a *Client) QubicLiveServiceGetBalance(params *QubicLiveServiceGetBalanceParams, opts ...ClientOption) (*QubicLiveServiceGetBalanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQubicLiveServiceGetBalanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QubicLiveService_GetBalance",
		Method:             "GET",
		PathPattern:        "/balances/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QubicLiveServiceGetBalanceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QubicLiveServiceGetBalanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*QubicLiveServiceGetBalanceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
QubicLiveServiceGetBlockHeight qubic live service get block height API
*/
func (a *Client) QubicLiveServiceGetBlockHeight(params *QubicLiveServiceGetBlockHeightParams, opts ...ClientOption) (*QubicLiveServiceGetBlockHeightOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQubicLiveServiceGetBlockHeightParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QubicLiveService_GetBlockHeight",
		Method:             "GET",
		PathPattern:        "/block-height",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QubicLiveServiceGetBlockHeightReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QubicLiveServiceGetBlockHeightOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*QubicLiveServiceGetBlockHeightDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
QubicLiveServiceGetTickInfo qubic live service get tick info API
*/
func (a *Client) QubicLiveServiceGetTickInfo(params *QubicLiveServiceGetTickInfoParams, opts ...ClientOption) (*QubicLiveServiceGetTickInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQubicLiveServiceGetTickInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "QubicLiveService_GetTickInfo",
		Method:             "GET",
		PathPattern:        "/tick-info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &QubicLiveServiceGetTickInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*QubicLiveServiceGetTickInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*QubicLiveServiceGetTickInfoDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
