// Code generated by go-swagger; DO NOT EDIT.

package qubic_live_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/qubic/integration/UseCases/go-clients/live/models"
)

// QubicLiveServiceGetBlockHeightReader is a Reader for the QubicLiveServiceGetBlockHeight structure.
type QubicLiveServiceGetBlockHeightReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *QubicLiveServiceGetBlockHeightReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewQubicLiveServiceGetBlockHeightOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewQubicLiveServiceGetBlockHeightDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewQubicLiveServiceGetBlockHeightOK creates a QubicLiveServiceGetBlockHeightOK with default headers values
func NewQubicLiveServiceGetBlockHeightOK() *QubicLiveServiceGetBlockHeightOK {
	return &QubicLiveServiceGetBlockHeightOK{}
}

/*
QubicLiveServiceGetBlockHeightOK describes a response with status code 200, with default header values.

A successful response.
*/
type QubicLiveServiceGetBlockHeightOK struct {
	Payload *models.PbGetBlockHeightResponse
}

// IsSuccess returns true when this qubic live service get block height o k response has a 2xx status code
func (o *QubicLiveServiceGetBlockHeightOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this qubic live service get block height o k response has a 3xx status code
func (o *QubicLiveServiceGetBlockHeightOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this qubic live service get block height o k response has a 4xx status code
func (o *QubicLiveServiceGetBlockHeightOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this qubic live service get block height o k response has a 5xx status code
func (o *QubicLiveServiceGetBlockHeightOK) IsServerError() bool {
	return false
}

// IsCode returns true when this qubic live service get block height o k response a status code equal to that given
func (o *QubicLiveServiceGetBlockHeightOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the qubic live service get block height o k response
func (o *QubicLiveServiceGetBlockHeightOK) Code() int {
	return 200
}

func (o *QubicLiveServiceGetBlockHeightOK) Error() string {
	return fmt.Sprintf("[GET /block-height][%d] qubicLiveServiceGetBlockHeightOK  %+v", 200, o.Payload)
}

func (o *QubicLiveServiceGetBlockHeightOK) String() string {
	return fmt.Sprintf("[GET /block-height][%d] qubicLiveServiceGetBlockHeightOK  %+v", 200, o.Payload)
}

func (o *QubicLiveServiceGetBlockHeightOK) GetPayload() *models.PbGetBlockHeightResponse {
	return o.Payload
}

func (o *QubicLiveServiceGetBlockHeightOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PbGetBlockHeightResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQubicLiveServiceGetBlockHeightDefault creates a QubicLiveServiceGetBlockHeightDefault with default headers values
func NewQubicLiveServiceGetBlockHeightDefault(code int) *QubicLiveServiceGetBlockHeightDefault {
	return &QubicLiveServiceGetBlockHeightDefault{
		_statusCode: code,
	}
}

/*
QubicLiveServiceGetBlockHeightDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type QubicLiveServiceGetBlockHeightDefault struct {
	_statusCode int

	Payload *models.RPCStatus
}

// IsSuccess returns true when this qubic live service get block height default response has a 2xx status code
func (o *QubicLiveServiceGetBlockHeightDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this qubic live service get block height default response has a 3xx status code
func (o *QubicLiveServiceGetBlockHeightDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this qubic live service get block height default response has a 4xx status code
func (o *QubicLiveServiceGetBlockHeightDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this qubic live service get block height default response has a 5xx status code
func (o *QubicLiveServiceGetBlockHeightDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this qubic live service get block height default response a status code equal to that given
func (o *QubicLiveServiceGetBlockHeightDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the qubic live service get block height default response
func (o *QubicLiveServiceGetBlockHeightDefault) Code() int {
	return o._statusCode
}

func (o *QubicLiveServiceGetBlockHeightDefault) Error() string {
	return fmt.Sprintf("[GET /block-height][%d] QubicLiveService_GetBlockHeight default  %+v", o._statusCode, o.Payload)
}

func (o *QubicLiveServiceGetBlockHeightDefault) String() string {
	return fmt.Sprintf("[GET /block-height][%d] QubicLiveService_GetBlockHeight default  %+v", o._statusCode, o.Payload)
}

func (o *QubicLiveServiceGetBlockHeightDefault) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *QubicLiveServiceGetBlockHeightDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
