// Code generated by go-swagger; DO NOT EDIT.

package qubic_live_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/qubic/integration/UseCases/go-clients/live/models"
)

// QubicLiveServiceBroadcastTransactionReader is a Reader for the QubicLiveServiceBroadcastTransaction structure.
type QubicLiveServiceBroadcastTransactionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *QubicLiveServiceBroadcastTransactionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewQubicLiveServiceBroadcastTransactionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewQubicLiveServiceBroadcastTransactionDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewQubicLiveServiceBroadcastTransactionOK creates a QubicLiveServiceBroadcastTransactionOK with default headers values
func NewQubicLiveServiceBroadcastTransactionOK() *QubicLiveServiceBroadcastTransactionOK {
	return &QubicLiveServiceBroadcastTransactionOK{}
}

/*
QubicLiveServiceBroadcastTransactionOK describes a response with status code 200, with default header values.

A successful response.
*/
type QubicLiveServiceBroadcastTransactionOK struct {
	Payload *models.PbBroadcastTransactionResponse
}

// IsSuccess returns true when this qubic live service broadcast transaction o k response has a 2xx status code
func (o *QubicLiveServiceBroadcastTransactionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this qubic live service broadcast transaction o k response has a 3xx status code
func (o *QubicLiveServiceBroadcastTransactionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this qubic live service broadcast transaction o k response has a 4xx status code
func (o *QubicLiveServiceBroadcastTransactionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this qubic live service broadcast transaction o k response has a 5xx status code
func (o *QubicLiveServiceBroadcastTransactionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this qubic live service broadcast transaction o k response a status code equal to that given
func (o *QubicLiveServiceBroadcastTransactionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the qubic live service broadcast transaction o k response
func (o *QubicLiveServiceBroadcastTransactionOK) Code() int {
	return 200
}

func (o *QubicLiveServiceBroadcastTransactionOK) Error() string {
	return fmt.Sprintf("[POST /broadcast-transaction][%d] qubicLiveServiceBroadcastTransactionOK  %+v", 200, o.Payload)
}

func (o *QubicLiveServiceBroadcastTransactionOK) String() string {
	return fmt.Sprintf("[POST /broadcast-transaction][%d] qubicLiveServiceBroadcastTransactionOK  %+v", 200, o.Payload)
}

func (o *QubicLiveServiceBroadcastTransactionOK) GetPayload() *models.PbBroadcastTransactionResponse {
	return o.Payload
}

func (o *QubicLiveServiceBroadcastTransactionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PbBroadcastTransactionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQubicLiveServiceBroadcastTransactionDefault creates a QubicLiveServiceBroadcastTransactionDefault with default headers values
func NewQubicLiveServiceBroadcastTransactionDefault(code int) *QubicLiveServiceBroadcastTransactionDefault {
	return &QubicLiveServiceBroadcastTransactionDefault{
		_statusCode: code,
	}
}

/*
QubicLiveServiceBroadcastTransactionDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type QubicLiveServiceBroadcastTransactionDefault struct {
	_statusCode int

	Payload *models.RPCStatus
}

// IsSuccess returns true when this qubic live service broadcast transaction default response has a 2xx status code
func (o *QubicLiveServiceBroadcastTransactionDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this qubic live service broadcast transaction default response has a 3xx status code
func (o *QubicLiveServiceBroadcastTransactionDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this qubic live service broadcast transaction default response has a 4xx status code
func (o *QubicLiveServiceBroadcastTransactionDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this qubic live service broadcast transaction default response has a 5xx status code
func (o *QubicLiveServiceBroadcastTransactionDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this qubic live service broadcast transaction default response a status code equal to that given
func (o *QubicLiveServiceBroadcastTransactionDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the qubic live service broadcast transaction default response
func (o *QubicLiveServiceBroadcastTransactionDefault) Code() int {
	return o._statusCode
}

func (o *QubicLiveServiceBroadcastTransactionDefault) Error() string {
	return fmt.Sprintf("[POST /broadcast-transaction][%d] QubicLiveService_BroadcastTransaction default  %+v", o._statusCode, o.Payload)
}

func (o *QubicLiveServiceBroadcastTransactionDefault) String() string {
	return fmt.Sprintf("[POST /broadcast-transaction][%d] QubicLiveService_BroadcastTransaction default  %+v", o._statusCode, o.Payload)
}

func (o *QubicLiveServiceBroadcastTransactionDefault) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *QubicLiveServiceBroadcastTransactionDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
