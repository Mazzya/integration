// Code generated by go-swagger; DO NOT EDIT.

package archive_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new archive service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for archive service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ArchiveServiceGetBlockHeight(params *ArchiveServiceGetBlockHeightParams, opts ...ClientOption) (*ArchiveServiceGetBlockHeightOK, error)

	ArchiveServiceGetChainHash(params *ArchiveServiceGetChainHashParams, opts ...ClientOption) (*ArchiveServiceGetChainHashOK, error)

	ArchiveServiceGetComputors(params *ArchiveServiceGetComputorsParams, opts ...ClientOption) (*ArchiveServiceGetComputorsOK, error)

	ArchiveServiceGetQuorumTickData(params *ArchiveServiceGetQuorumTickDataParams, opts ...ClientOption) (*ArchiveServiceGetQuorumTickDataOK, error)

	ArchiveServiceGetStatus(params *ArchiveServiceGetStatusParams, opts ...ClientOption) (*ArchiveServiceGetStatusOK, error)

	ArchiveServiceGetTickData(params *ArchiveServiceGetTickDataParams, opts ...ClientOption) (*ArchiveServiceGetTickDataOK, error)

	ArchiveServiceGetTickTransactions(params *ArchiveServiceGetTickTransactionsParams, opts ...ClientOption) (*ArchiveServiceGetTickTransactionsOK, error)

	ArchiveServiceGetTickTransferTransactions(params *ArchiveServiceGetTickTransferTransactionsParams, opts ...ClientOption) (*ArchiveServiceGetTickTransferTransactionsOK, error)

	ArchiveServiceGetTransaction(params *ArchiveServiceGetTransactionParams, opts ...ClientOption) (*ArchiveServiceGetTransactionOK, error)

	ArchiveServiceGetTransferTransactionsPerTick(params *ArchiveServiceGetTransferTransactionsPerTickParams, opts ...ClientOption) (*ArchiveServiceGetTransferTransactionsPerTickOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ArchiveServiceGetBlockHeight archive service get block height API
*/
func (a *Client) ArchiveServiceGetBlockHeight(params *ArchiveServiceGetBlockHeightParams, opts ...ClientOption) (*ArchiveServiceGetBlockHeightOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewArchiveServiceGetBlockHeightParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ArchiveService_GetBlockHeight",
		Method:             "GET",
		PathPattern:        "/block-height",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ArchiveServiceGetBlockHeightReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ArchiveServiceGetBlockHeightOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ArchiveServiceGetBlockHeightDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ArchiveServiceGetChainHash archive service get chain hash API
*/
func (a *Client) ArchiveServiceGetChainHash(params *ArchiveServiceGetChainHashParams, opts ...ClientOption) (*ArchiveServiceGetChainHashOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewArchiveServiceGetChainHashParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ArchiveService_GetChainHash",
		Method:             "GET",
		PathPattern:        "/ticks/{tickNumber}/chain-hash",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ArchiveServiceGetChainHashReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ArchiveServiceGetChainHashOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ArchiveServiceGetChainHashDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ArchiveServiceGetComputors archive service get computors API
*/
func (a *Client) ArchiveServiceGetComputors(params *ArchiveServiceGetComputorsParams, opts ...ClientOption) (*ArchiveServiceGetComputorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewArchiveServiceGetComputorsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ArchiveService_GetComputors",
		Method:             "GET",
		PathPattern:        "/epochs/{epoch}/computors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ArchiveServiceGetComputorsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ArchiveServiceGetComputorsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ArchiveServiceGetComputorsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ArchiveServiceGetQuorumTickData archive service get quorum tick data API
*/
func (a *Client) ArchiveServiceGetQuorumTickData(params *ArchiveServiceGetQuorumTickDataParams, opts ...ClientOption) (*ArchiveServiceGetQuorumTickDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewArchiveServiceGetQuorumTickDataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ArchiveService_GetQuorumTickData",
		Method:             "GET",
		PathPattern:        "/ticks/{tickNumber}/quorum-tick-data",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ArchiveServiceGetQuorumTickDataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ArchiveServiceGetQuorumTickDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ArchiveServiceGetQuorumTickDataDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ArchiveServiceGetStatus archive service get status API
*/
func (a *Client) ArchiveServiceGetStatus(params *ArchiveServiceGetStatusParams, opts ...ClientOption) (*ArchiveServiceGetStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewArchiveServiceGetStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ArchiveService_GetStatus",
		Method:             "GET",
		PathPattern:        "/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ArchiveServiceGetStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ArchiveServiceGetStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ArchiveServiceGetStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ArchiveServiceGetTickData archive service get tick data API
*/
func (a *Client) ArchiveServiceGetTickData(params *ArchiveServiceGetTickDataParams, opts ...ClientOption) (*ArchiveServiceGetTickDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewArchiveServiceGetTickDataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ArchiveService_GetTickData",
		Method:             "GET",
		PathPattern:        "/ticks/{tickNumber}/tick-data",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ArchiveServiceGetTickDataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ArchiveServiceGetTickDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ArchiveServiceGetTickDataDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ArchiveServiceGetTickTransactions archive service get tick transactions API
*/
func (a *Client) ArchiveServiceGetTickTransactions(params *ArchiveServiceGetTickTransactionsParams, opts ...ClientOption) (*ArchiveServiceGetTickTransactionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewArchiveServiceGetTickTransactionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ArchiveService_GetTickTransactions",
		Method:             "GET",
		PathPattern:        "/ticks/{tickNumber}/transactions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ArchiveServiceGetTickTransactionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ArchiveServiceGetTickTransactionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ArchiveServiceGetTickTransactionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ArchiveServiceGetTickTransferTransactions archive service get tick transfer transactions API
*/
func (a *Client) ArchiveServiceGetTickTransferTransactions(params *ArchiveServiceGetTickTransferTransactionsParams, opts ...ClientOption) (*ArchiveServiceGetTickTransferTransactionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewArchiveServiceGetTickTransferTransactionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ArchiveService_GetTickTransferTransactions",
		Method:             "GET",
		PathPattern:        "/ticks/{tickNumber}/transfer-transactions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ArchiveServiceGetTickTransferTransactionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ArchiveServiceGetTickTransferTransactionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ArchiveServiceGetTickTransferTransactionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ArchiveServiceGetTransaction archive service get transaction API
*/
func (a *Client) ArchiveServiceGetTransaction(params *ArchiveServiceGetTransactionParams, opts ...ClientOption) (*ArchiveServiceGetTransactionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewArchiveServiceGetTransactionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ArchiveService_GetTransaction",
		Method:             "GET",
		PathPattern:        "/transactions/{txId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ArchiveServiceGetTransactionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ArchiveServiceGetTransactionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ArchiveServiceGetTransactionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ArchiveServiceGetTransferTransactionsPerTick archive service get transfer transactions per tick API
*/
func (a *Client) ArchiveServiceGetTransferTransactionsPerTick(params *ArchiveServiceGetTransferTransactionsPerTickParams, opts ...ClientOption) (*ArchiveServiceGetTransferTransactionsPerTickOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewArchiveServiceGetTransferTransactionsPerTickParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ArchiveService_GetTransferTransactionsPerTick",
		Method:             "GET",
		PathPattern:        "/identities/{identity}/transfer-transactions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ArchiveServiceGetTransferTransactionsPerTickReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ArchiveServiceGetTransferTransactionsPerTickOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ArchiveServiceGetTransferTransactionsPerTickDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
