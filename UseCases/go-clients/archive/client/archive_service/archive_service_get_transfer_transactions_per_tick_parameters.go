// Code generated by go-swagger; DO NOT EDIT.

package archive_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewArchiveServiceGetTransferTransactionsPerTickParams creates a new ArchiveServiceGetTransferTransactionsPerTickParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewArchiveServiceGetTransferTransactionsPerTickParams() *ArchiveServiceGetTransferTransactionsPerTickParams {
	return &ArchiveServiceGetTransferTransactionsPerTickParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewArchiveServiceGetTransferTransactionsPerTickParamsWithTimeout creates a new ArchiveServiceGetTransferTransactionsPerTickParams object
// with the ability to set a timeout on a request.
func NewArchiveServiceGetTransferTransactionsPerTickParamsWithTimeout(timeout time.Duration) *ArchiveServiceGetTransferTransactionsPerTickParams {
	return &ArchiveServiceGetTransferTransactionsPerTickParams{
		timeout: timeout,
	}
}

// NewArchiveServiceGetTransferTransactionsPerTickParamsWithContext creates a new ArchiveServiceGetTransferTransactionsPerTickParams object
// with the ability to set a context for a request.
func NewArchiveServiceGetTransferTransactionsPerTickParamsWithContext(ctx context.Context) *ArchiveServiceGetTransferTransactionsPerTickParams {
	return &ArchiveServiceGetTransferTransactionsPerTickParams{
		Context: ctx,
	}
}

// NewArchiveServiceGetTransferTransactionsPerTickParamsWithHTTPClient creates a new ArchiveServiceGetTransferTransactionsPerTickParams object
// with the ability to set a custom HTTPClient for a request.
func NewArchiveServiceGetTransferTransactionsPerTickParamsWithHTTPClient(client *http.Client) *ArchiveServiceGetTransferTransactionsPerTickParams {
	return &ArchiveServiceGetTransferTransactionsPerTickParams{
		HTTPClient: client,
	}
}

/*
ArchiveServiceGetTransferTransactionsPerTickParams contains all the parameters to send to the API endpoint

	for the archive service get transfer transactions per tick operation.

	Typically these are written to a http.Request.
*/
type ArchiveServiceGetTransferTransactionsPerTickParams struct {

	// EndTick.
	//
	// Format: int64
	EndTick *int64

	// Identity.
	Identity string

	// StartTick.
	//
	// Format: int64
	StartTick *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the archive service get transfer transactions per tick params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ArchiveServiceGetTransferTransactionsPerTickParams) WithDefaults() *ArchiveServiceGetTransferTransactionsPerTickParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the archive service get transfer transactions per tick params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ArchiveServiceGetTransferTransactionsPerTickParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the archive service get transfer transactions per tick params
func (o *ArchiveServiceGetTransferTransactionsPerTickParams) WithTimeout(timeout time.Duration) *ArchiveServiceGetTransferTransactionsPerTickParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the archive service get transfer transactions per tick params
func (o *ArchiveServiceGetTransferTransactionsPerTickParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the archive service get transfer transactions per tick params
func (o *ArchiveServiceGetTransferTransactionsPerTickParams) WithContext(ctx context.Context) *ArchiveServiceGetTransferTransactionsPerTickParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the archive service get transfer transactions per tick params
func (o *ArchiveServiceGetTransferTransactionsPerTickParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the archive service get transfer transactions per tick params
func (o *ArchiveServiceGetTransferTransactionsPerTickParams) WithHTTPClient(client *http.Client) *ArchiveServiceGetTransferTransactionsPerTickParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the archive service get transfer transactions per tick params
func (o *ArchiveServiceGetTransferTransactionsPerTickParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEndTick adds the endTick to the archive service get transfer transactions per tick params
func (o *ArchiveServiceGetTransferTransactionsPerTickParams) WithEndTick(endTick *int64) *ArchiveServiceGetTransferTransactionsPerTickParams {
	o.SetEndTick(endTick)
	return o
}

// SetEndTick adds the endTick to the archive service get transfer transactions per tick params
func (o *ArchiveServiceGetTransferTransactionsPerTickParams) SetEndTick(endTick *int64) {
	o.EndTick = endTick
}

// WithIdentity adds the identity to the archive service get transfer transactions per tick params
func (o *ArchiveServiceGetTransferTransactionsPerTickParams) WithIdentity(identity string) *ArchiveServiceGetTransferTransactionsPerTickParams {
	o.SetIdentity(identity)
	return o
}

// SetIdentity adds the identity to the archive service get transfer transactions per tick params
func (o *ArchiveServiceGetTransferTransactionsPerTickParams) SetIdentity(identity string) {
	o.Identity = identity
}

// WithStartTick adds the startTick to the archive service get transfer transactions per tick params
func (o *ArchiveServiceGetTransferTransactionsPerTickParams) WithStartTick(startTick *int64) *ArchiveServiceGetTransferTransactionsPerTickParams {
	o.SetStartTick(startTick)
	return o
}

// SetStartTick adds the startTick to the archive service get transfer transactions per tick params
func (o *ArchiveServiceGetTransferTransactionsPerTickParams) SetStartTick(startTick *int64) {
	o.StartTick = startTick
}

// WriteToRequest writes these params to a swagger request
func (o *ArchiveServiceGetTransferTransactionsPerTickParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EndTick != nil {

		// query param endTick
		var qrEndTick int64

		if o.EndTick != nil {
			qrEndTick = *o.EndTick
		}
		qEndTick := swag.FormatInt64(qrEndTick)
		if qEndTick != "" {

			if err := r.SetQueryParam("endTick", qEndTick); err != nil {
				return err
			}
		}
	}

	// path param identity
	if err := r.SetPathParam("identity", o.Identity); err != nil {
		return err
	}

	if o.StartTick != nil {

		// query param startTick
		var qrStartTick int64

		if o.StartTick != nil {
			qrStartTick = *o.StartTick
		}
		qStartTick := swag.FormatInt64(qrStartTick)
		if qStartTick != "" {

			if err := r.SetQueryParam("startTick", qStartTick); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
