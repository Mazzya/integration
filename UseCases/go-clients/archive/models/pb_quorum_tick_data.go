// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PbQuorumTickData pb quorum tick data
//
// swagger:model pbQuorumTickData
type PbQuorumTickData struct {

	// quorum diff per computor
	QuorumDiffPerComputor map[string]PbQuorumDiff `json:"quorumDiffPerComputor,omitempty"`

	// quorum tick structure
	QuorumTickStructure *PbQuorumTickStructure `json:"quorumTickStructure,omitempty"`
}

// Validate validates this pb quorum tick data
func (m *PbQuorumTickData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQuorumDiffPerComputor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuorumTickStructure(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PbQuorumTickData) validateQuorumDiffPerComputor(formats strfmt.Registry) error {
	if swag.IsZero(m.QuorumDiffPerComputor) { // not required
		return nil
	}

	for k := range m.QuorumDiffPerComputor {

		if err := validate.Required("quorumDiffPerComputor"+"."+k, "body", m.QuorumDiffPerComputor[k]); err != nil {
			return err
		}
		if val, ok := m.QuorumDiffPerComputor[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("quorumDiffPerComputor" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("quorumDiffPerComputor" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *PbQuorumTickData) validateQuorumTickStructure(formats strfmt.Registry) error {
	if swag.IsZero(m.QuorumTickStructure) { // not required
		return nil
	}

	if m.QuorumTickStructure != nil {
		if err := m.QuorumTickStructure.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quorumTickStructure")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("quorumTickStructure")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this pb quorum tick data based on the context it is used
func (m *PbQuorumTickData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateQuorumDiffPerComputor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQuorumTickStructure(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PbQuorumTickData) contextValidateQuorumDiffPerComputor(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.QuorumDiffPerComputor {

		if val, ok := m.QuorumDiffPerComputor[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *PbQuorumTickData) contextValidateQuorumTickStructure(ctx context.Context, formats strfmt.Registry) error {

	if m.QuorumTickStructure != nil {

		if swag.IsZero(m.QuorumTickStructure) { // not required
			return nil
		}

		if err := m.QuorumTickStructure.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quorumTickStructure")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("quorumTickStructure")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PbQuorumTickData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PbQuorumTickData) UnmarshalBinary(b []byte) error {
	var res PbQuorumTickData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
