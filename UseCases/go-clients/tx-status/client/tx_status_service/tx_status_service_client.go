// Code generated by go-swagger; DO NOT EDIT.

package tx_status_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new tx status service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for tx status service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	TxStatusServiceGetBlockHeight(params *TxStatusServiceGetBlockHeightParams, opts ...ClientOption) (*TxStatusServiceGetBlockHeightOK, error)

	TxStatusServiceGetStatus(params *TxStatusServiceGetStatusParams, opts ...ClientOption) (*TxStatusServiceGetStatusOK, error)

	TxStatusServiceGetTickTransactionsStatus(params *TxStatusServiceGetTickTransactionsStatusParams, opts ...ClientOption) (*TxStatusServiceGetTickTransactionsStatusOK, error)

	TxStatusServiceGetTransactionStatus(params *TxStatusServiceGetTransactionStatusParams, opts ...ClientOption) (*TxStatusServiceGetTransactionStatusOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
TxStatusServiceGetBlockHeight tx status service get block height API
*/
func (a *Client) TxStatusServiceGetBlockHeight(params *TxStatusServiceGetBlockHeightParams, opts ...ClientOption) (*TxStatusServiceGetBlockHeightOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTxStatusServiceGetBlockHeightParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TxStatusService_GetBlockHeight",
		Method:             "GET",
		PathPattern:        "/tx-status/block-height",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TxStatusServiceGetBlockHeightReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TxStatusServiceGetBlockHeightOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TxStatusServiceGetBlockHeightDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TxStatusServiceGetStatus tx status service get status API
*/
func (a *Client) TxStatusServiceGetStatus(params *TxStatusServiceGetStatusParams, opts ...ClientOption) (*TxStatusServiceGetStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTxStatusServiceGetStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TxStatusService_GetStatus",
		Method:             "GET",
		PathPattern:        "/tx-status/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TxStatusServiceGetStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TxStatusServiceGetStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TxStatusServiceGetStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TxStatusServiceGetTickTransactionsStatus tx status service get tick transactions status API
*/
func (a *Client) TxStatusServiceGetTickTransactionsStatus(params *TxStatusServiceGetTickTransactionsStatusParams, opts ...ClientOption) (*TxStatusServiceGetTickTransactionsStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTxStatusServiceGetTickTransactionsStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TxStatusService_GetTickTransactionsStatus",
		Method:             "GET",
		PathPattern:        "/tx-status/ticks/{tickNumber}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TxStatusServiceGetTickTransactionsStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TxStatusServiceGetTickTransactionsStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TxStatusServiceGetTickTransactionsStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TxStatusServiceGetTransactionStatus tx status service get transaction status API
*/
func (a *Client) TxStatusServiceGetTransactionStatus(params *TxStatusServiceGetTransactionStatusParams, opts ...ClientOption) (*TxStatusServiceGetTransactionStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTxStatusServiceGetTransactionStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TxStatusService_GetTransactionStatus",
		Method:             "GET",
		PathPattern:        "/tx-status/{txId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TxStatusServiceGetTransactionStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TxStatusServiceGetTransactionStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TxStatusServiceGetTransactionStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
